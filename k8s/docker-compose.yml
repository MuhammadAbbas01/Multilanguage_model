version: '3.8'

services:
  # Main translation service.
  # It builds the Docker image from the current directory and exposes port 5000.
  lingua-translate:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    # Ensure Redis is up and running before starting the translation service.
    depends_on:
      - redis
    # Map local folders to the container for model caching and logs.
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped
    # Health check to monitor the application's status.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session management.
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    # Persist Redis data to a named volume.
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx reverse proxy.
  # This routes incoming requests and handles SSL termination.
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    # Mount the Nginx configuration and SSL certificates.
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - lingua-translate
    restart: unless-stopped

  # Prometheus for monitoring.
  # This scrapes metrics from the translation service.
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    # Mount the Prometheus configuration and persist data to a volume.
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # Grafana for creating dashboards to visualize metrics.
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    # Persist Grafana data to a named volume.
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
