#!/usr/bin/env python3
"""
Enhanced Translation Engine with comprehensive multi-language support
"""

import os
import time
import json
from datetime import datetime
from typing import Dict, List, Optional, Any

from flask import Flask, request, jsonify, g
from werkzeug.middleware.proxy_fix import ProxyFix
import structlog
from prometheus_client import Counter, Histogram, generate_latest

# Configure structured logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

# Prometheus metrics
REQUEST_COUNT = Counter('translation_requests_total', 'Total translation requests', ['method', 'endpoint'])
REQUEST_LATENCY = Histogram('translation_request_duration_seconds', 'Translation request latency')

class SimpleRateLimiter:
    """Simple in-memory rate limiter"""
    def __init__(self):
        self.requests = {}
        self.limit = 100  # requests per minute
        
    def is_allowed(self, client_ip: str) -> bool:
        current_time = time.time()
        minute_key = int(current_time // 60)
        
        if client_ip not in self.requests:
            self.requests[client_ip] = {}
        
        # Clean old entries
        self.requests[client_ip] = {
            k: v for k, v in self.requests[client_ip].items() 
            if k >= minute_key - 1
        }
        
        current_count = self.requests[client_ip].get(minute_key, 0)
        if current_count >= self.limit:
            return False
            
        self.requests[client_ip][minute_key] = current_count + 1
        return True

class EnhancedTranslationEngine:
    """Enhanced translation engine with comprehensive language support"""
    
    def __init__(self):
        self.supported_languages = ["en", "es", "fr", "de", "it", "ja", "ko", "zh", "ru", "ar"]
        
        # Comprehensive translation dictionaries for all supported languages
        self.translations = {
            "es": {
                "hello": "hola",
                "world": "mundo",
                "thank you": "gracias",
                "good morning": "buenos días",
                "good evening": "buenas tardes",
                "good night": "buenas noches",
                "welcome": "bienvenido",
                "login": "iniciar sesión",
                "register": "registrarse",
                "checkout": "finalizar compra",
                "add to cart": "añadir al carrito",
                "your order": "su pedido",
                "has been processed": "ha sido procesado",
                "successfully": "con éxito",
                "premium subscription": "suscripción premium",
                "activated": "activada",
                "welcome to our store": "bienvenido a nuestra tienda",
                "checkout now": "finalizar compra ahora",
                "your premium subscription has been activated successfully": "su suscripción premium ha sido activada con éxito",
                "password": "contraseña",
                "email": "correo electrónico",
                "profile": "perfil",
                "settings": "configuración",
                "home": "inicio",
                "about": "acerca de",
                "contact": "contacto"
            },
            "fr": {
                "hello": "bonjour",
                "world": "monde",
                "thank you": "merci",
                "good morning": "bonjour",
                "good evening": "bonsoir",
                "good night": "bonne nuit",
                "welcome": "bienvenue",
                "login": "connexion",
                "register": "s'inscrire",
                "checkout": "commander",
                "add to cart": "ajouter au panier",
                "your order": "votre commande",
                "has been processed": "a été traitée",
                "successfully": "avec succès",
                "premium subscription": "abonnement premium",
                "activated": "activé",
                "welcome to our store": "bienvenue dans notre magasin",
                "checkout now": "commander maintenant",
                "your premium subscription has been activated successfully": "votre abonnement premium a été activé avec succès",
                "password": "mot de passe",
                "email": "e-mail",
                "profile": "profil",
                "settings": "paramètres",
                "home": "accueil",
                "about": "à propos",
                "contact": "contact"
            },
            "de": {
                "hello": "hallo",
                "world": "welt",
                "thank you": "danke",
                "good morning": "guten morgen",
                "good evening": "guten abend",
                "good night": "gute nacht",
                "welcome": "willkommen",
                "login": "anmelden",
                "register": "registrieren",
                "checkout": "zur kasse",
                "add to cart": "in den warenkorb",
                "your order": "ihre bestellung",
                "has been processed": "wurde bearbeitet",
                "successfully": "erfolgreich",
                "premium subscription": "premium-abonnement",
                "activated": "aktiviert",
                "welcome to our store": "willkommen in unserem geschäft",
                "checkout now": "jetzt zur kasse",
                "your premium subscription has been activated successfully": "ihr premium-abonnement wurde erfolgreich aktiviert",
                "password": "passwort",
                "email": "e-mail",
                "profile": "profil",
                "settings": "einstellungen",
                "home": "startseite",
                "about": "über uns",
                "contact": "kontakt"
            },
            "it": {
                "hello": "ciao",
                "world": "mondo",
                "thank you": "grazie",
                "good morning": "buongiorno",
                "good evening": "buonasera",
                "good night": "buonanotte",
                "welcome": "benvenuto",
                "login": "accedi",
                "register": "registrati",
                "checkout": "checkout",
                "add to cart": "aggiungi al carrello",
                "your order": "il tuo ordine",
                "has been processed": "è stato elaborato",
                "successfully": "con successo",
                "premium subscription": "abbonamento premium",
                "activated": "attivato",
                "welcome to our store": "benvenuto nel nostro negozio",
                "checkout now": "checkout ora",
                "your premium subscription has been activated successfully": "il tuo abbonamento premium è stato attivato con successo",
                "password": "password",
                "email": "email",
                "profile": "profilo",
                "settings": "impostazioni",
                "home": "home",
                "about": "chi siamo",
                "contact": "contatto"
            },
            "ja": {
                "hello": "こんにちは",
                "world": "世界",
                "thank you": "ありがとう",
                "good morning": "おはよう",
                "good evening": "こんばんは",
                "good night": "おやすみ",
                "welcome": "いらっしゃいませ",
                "login": "ログイン",
                "register": "登録",
                "checkout": "チェックアウト",
                "add to cart": "カートに追加",
                "your order": "ご注文",
                "has been processed": "処理されました",
                "successfully": "正常に",
                "premium subscription": "プレミアム購読",
                "activated": "有効化",
                "welcome to our store": "私たちの店へようこそ",
                "checkout now": "今すぐチェックアウト",
                "your premium subscription has been activated successfully": "プレミアム購読が正常に有効化されました",
                "password": "パスワード",
                "email": "メール",
                "profile": "プロフィール",
                "settings": "設定",
                "home": "ホーム",
                "about": "について",
                "contact": "連絡先"
            },
            "ko": {
                "hello": "안녕하세요",
                "world": "세계",
                "thank you": "감사합니다",
                "good morning": "좋은 아침",
                "good evening": "좋은 저녁",
                "good night": "좋은 밤",
                "welcome": "환영합니다",
                "login": "로그인",
                "register": "등록",
                "checkout": "체크아웃",
                "add to cart": "장바구니에 추가",
                "your order": "주문",
                "has been processed": "처리되었습니다",
                "successfully": "성공적으로",
                "premium subscription": "프리미엄 구독",
                "activated": "활성화됨",
                "welcome to our store": "저희 매장에 오신 것을 환영합니다",
                "checkout now": "지금 체크아웃",
                "your premium subscription has been activated successfully": "프리미엄 구독이 성공적으로 활성화되었습니다",
                "password": "비밀번호",
                "email": "이메일",
                "profile": "프로필",
                "settings": "설정",
                "home": "홈",
                "about": "소개",
                "contact": "연락처"
            },
            "zh": {
                "hello": "你好",
                "world": "世界",
                "thank you": "谢谢",
                "good morning": "早上好",
                "good evening": "晚上好",
                "good night": "晚安",
                "welcome": "欢迎",
                "login": "登录",
                "register": "注册",
                "checkout": "结账",
                "add to cart": "添加到购物车",
                "your order": "您的订单",
                "has been processed": "已处理",
                "successfully": "成功",
                "premium subscription": "高级订阅",
                "activated": "已激活",
                "welcome to our store": "欢迎来到我们的商店",
                "checkout now": "立即结账",
                "your premium subscription has been activated successfully": "您的高级订阅已成功激活",
                "password": "密码",
                "email": "电子邮件",
                "profile": "个人资料",
                "settings": "设置",
                "home": "首页",
                "about": "关于",
                "contact": "联系"
            },
            "ru": {
                "hello": "привет",
                "world": "мир",
                "thank you": "спасибо",
                "good morning": "доброе утро",
                "good evening": "добрый вечер",
                "good night": "спокойной ночи",
                "welcome": "добро пожаловать",
                "login": "войти",
                "register": "зарегистрироваться",
                "checkout": "оформить заказ",
                "add to cart": "добавить в корзину",
                "your order": "ваш заказ",
                "has been processed": "был обработан",
                "successfully": "успешно",
                "premium subscription": "премиум подписка",
                "activated": "активирована",
                "welcome to our store": "добро пожаловать в наш магазин",
                "checkout now": "оформить заказ сейчас",
                "your premium subscription has been activated successfully": "ваша премиум подписка была успешно активирована",
                "password": "пароль",
                "email": "электронная почта",
                "profile": "профиль",
                "settings": "настройки",
                "home": "главная",
                "about": "о нас",
                "contact": "контакт"
            },
            "ar": {
                "hello": "مرحبا",
                "world": "عالم",
                "thank you": "شكرا لك",
                "good morning": "صباح الخير",
                "good evening": "مساء الخير",
                "good night": "تصبح على خير",
                "welcome": "أهلا وسهلا",
                "login": "تسجيل الدخول",
                "register": "تسجيل",
                "checkout": "الدفع",
                "add to cart": "أضف إلى السلة",
                "your order": "طلبك",
                "has been processed": "تم معالجته",
                "successfully": "بنجاح",
                "premium subscription": "اشتراك مميز",
                "activated": "مفعل",
                "welcome to our store": "أهلا وسهلا في متجرنا",
                "checkout now": "ادفع الآن",
                "your premium subscription has been activated successfully": "تم تفعيل اشتراكك المميز بنجاح",
                "password": "كلمة المرور",
                "email": "البريد الإلكتروني",
                "profile": "الملف الشخصي",
                "settings": "الإعدادات",
                "home": "الرئيسية",
                "about": "حول",
                "contact": "اتصال"
            }
        }
        
        # Try to load transformers, fall back to enhanced logic if not available
        try:
            from transformers import pipeline
            import torch
            
            device = 0 if torch.cuda.is_available() else -1
            self.model_pipeline = pipeline(
                "translation", 
                model="Helsinki-NLP/opus-mt-en-es",
                device=device
            )
            logger.info("AI translation model loaded successfully")
        except Exception as e:
            logger.warning(f"Could not load AI model: {e}. Using enhanced rule-based translation.")
            self.model_pipeline = None
    
    def get_supported_languages(self) -> List[str]:
        return self.supported_languages
    
    def translate(self, text: str, source_lang: str = "auto", target_lang: str = "en", 
                 style: str = "general", context: str = "") -> Dict[str, Any]:
        """
        Enhanced translation with better language support
        """
        start_time = time.time()
        
        try:
            # Use AI model for English to Spanish if available
            if self.model_pipeline and source_lang in ["auto", "en"] and target_lang == "es":
                result = self.model_pipeline(text)
                translated_text = result[0]['translation_text']
            else:
                # Use enhanced rule-based translation
                translated_text = self._enhanced_translate(text, target_lang)
            
            return {
                'translated_text': translated_text,
                'detected_language': source_lang,
                'confidence': 0.95,
                'translation_time': time.time() - start_time
            }
            
        except Exception as e:
            logger.error(f"Translation failed: {e}")
            return {
                'translated_text': f"Translation Error: {text}",
                'detected_language': source_lang,
                'confidence': 0.0,
                'translation_time': time.time() - start_time
            }
    
    def _enhanced_translate(self, text: str, target_lang: str) -> str:
        """Enhanced rule-based translation with comprehensive phrase matching"""
        if target_lang not in self.translations:
            return f"[{target_lang.upper()}] {text}"
        
        text_lower = text.lower().strip()
        lang_dict = self.translations[target_lang]
        
        # Direct phrase match
        if text_lower in lang_dict:
            return lang_dict[text_lower]
        
        # Word-by-word replacement for longer sentences
        translated_words = []
        words = text_lower.split()
        
        i = 0
        while i < len(words):
            matched = False
            
            # Try 5-word phrases first
            if i + 4 < len(words):
                five_word = " ".join(words[i:i+5])
                if five_word in lang_dict:
                    translated_words.append(lang_dict[five_word])
                    i += 5
                    matched = True
            
            # Try 4-word phrases
            if not matched and i + 3 < len(words):
                four_word = " ".join(words[i:i+4])
                if four_word in lang_dict:
                    translated_words.append(lang_dict[four_word])
                    i += 4
                    matched = True
            
            # Try 3-word phrases
            if not matched and i + 2 < len(words):
                three_word = " ".join(words[i:i+3])
                if three_word in lang_dict:
                    translated_words.append(lang_dict[three_word])
                    i += 3
                    matched = True
            
            # Try 2-word phrases
            if not matched and i + 1 < len(words):
                two_word = " ".join(words[i:i+2])
                if two_word in lang_dict:
                    translated_words.append(lang_dict[two_word])
                    i += 2
                    matched = True
            
            # Try single word
            if not matched:
                if words[i] in lang_dict:
                    translated_words.append(lang_dict[words[i]])
                else:
                    translated_words.append(words[i])
                i += 1
        
        result = " ".join(translated_words)
        
        # Capitalize first letter
        if result:
            result = result[0].upper() + result[1:] if len(result) > 1 else result.upper()
        
        return result if result.strip() else f"[{target_lang.upper()}] {text}"

class TranslationAPI:
    def __init__(self):
        self.app = Flask(__name__)
        self.app.wsgi_app = ProxyFix(self.app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1)
        
        # Initialize components
        self._setup_components()
        self._setup_routes()
        self._setup_middleware()

    def _setup_components(self):
        """Initialize core components with error handling"""
        try:
            self.translator = EnhancedTranslationEngine()
            self.rate_limiter = SimpleRateLimiter()
            self.cache = {}  # Simple in-memory cache
            logger.info("All components initialized successfully")
        except Exception as e:
            logger.error(f"Component initialization failed: {e}")
            raise

    def _setup_middleware(self):
        """Setup request middleware"""
        @self.app.before_request
        def before_request():
            g.start_time = time.time()
            REQUEST_COUNT.labels(method=request.method, endpoint=request.endpoint or 'unknown').inc()

        @self.app.after_request
        def after_request(response):
            if hasattr(g, 'start_time'):
                REQUEST_LATENCY.observe(time.time() - g.start_time)
            return response

    def _setup_routes(self):
        """Setup API routes"""
        
        @self.app.route('/')
        def health_check():
            """Health check endpoint"""
            return jsonify({
                'status': 'healthy',
                'service': 'lingua-translate',
                'version': '2.1.0',
                'timestamp': datetime.utcnow().isoformat()
            })

        @self.app.route('/metrics')
        def metrics():
            """Prometheus metrics endpoint"""
            return generate_latest()

        @self.app.route('/translate', methods=['POST'])
        def translate():
            """Main translation endpoint"""
            return self._handle_translate_request()

        @self.app.route('/languages', methods=['GET'])
        def get_languages():
            """Get supported languages"""
            return jsonify({
                'supported_languages': self.translator.get_supported_languages(),
                'total_count': len(self.translator.get_supported_languages())
            })

        @self.app.route('/batch-translate', methods=['POST'])
        def batch_translate():
            """Batch translation endpoint"""
            return self._handle_batch_translate()

    def _handle_translate_request(self):
        """Handle single translation request with proper security"""
        try:
            # Rate limiting
            client_ip = request.environ.get('HTTP_X_FORWARDED_FOR', request.remote_addr)
            if not self.rate_limiter.is_allowed(client_ip):
                return jsonify({'error': 'Rate limit exceeded'}), 429

            # Validate request
            if not request.is_json:
                return jsonify({'error': 'Content-Type must be application/json'}), 400

            data = request.get_json()
            validation_error = self._validate_translate_request(data)
            if validation_error:
                return jsonify({'error': validation_error}), 400

            # Extract parameters with defaults
            text = data['text']
            source_lang = data.get('source_lang', 'auto')
            target_lang = data.get('target_lang', 'en')
            style = data.get('style', 'general')

            # Check cache
            cache_key = f"translate:{source_lang}:{target_lang}:{style}:{hash(text)}"
            if cache_key in self.cache:
                logger.info("Cache hit", cache_key=cache_key)
                response_data = self.cache[cache_key].copy()
                response_data['cached'] = True
                return jsonify(response_data)

            # Perform translation
            start_time = time.time()
            translation_result = self.translator.translate(
                text=text,
                source_lang=source_lang,
                target_lang=target_lang,
                style=style
            )
            translation_time = time.time() - start_time

            # Prepare response
            response_data = {
                'original_text': text,
                'translated_text': translation_result['translated_text'],
                'source_language': translation_result.get('detected_language', source_lang),
                'target_language': target_lang,
                'style': style,
                'confidence_score': translation_result.get('confidence', 0.95),
                'translation_time': round(translation_time, 3),
                'cached': False
            }

            # Cache result
            try:
                self.cache[cache_key] = response_data.copy()
            except Exception as e:
                logger.warning(f"Failed to cache result: {e}")

            logger.info("Translation completed", 
                        source_lang=source_lang, 
                        target_lang=target_lang,
                        translation_time=translation_time)
            
            return jsonify(response_data)

        except Exception as e:
            logger.error(f"Translation error: {e}")
            return jsonify({'error': 'Internal server error'}), 500

    def _handle_batch_translate(self):
        """Handle batch translation requests"""
        try:
            data = request.get_json()
            if not data or 'texts' not in data:
                return jsonify({'error': 'Missing texts array'}), 400

            texts = data['texts']
            if len(texts) > 100:
                return jsonify({'error': 'Maximum 100 texts per batch'}), 400

            source_lang = data.get('source_lang', 'auto')
            target_lang = data.get('target_lang', 'en')
            style = data.get('style', 'general')

            results = []
            for text in texts:
                result = self.translator.translate(
                    text=text,
                    source_lang=source_lang,
                    target_lang=target_lang,
                    style=style
                )
                results.append({
                    'original': text,
                    'translated': result['translated_text'],
                    'confidence': result.get('confidence', 0.95)
                })

            return jsonify({
                'results': results,
                'total_count': len(results),
                'source_language': source_lang,
                'target_language': target_lang
            })

        except Exception as e:
            logger.error(f"Batch translation error: {e}")
            return jsonify({'error': 'Internal server error'}), 500

    def _validate_translate_request(self, data: Dict) -> Optional[str]:
        """Validate translation request data"""
        if not data or not isinstance(data, dict):
            return 'Invalid JSON data'
            
        if not data.get('text'):
            return 'Missing required field: text'
        
        if not isinstance(data['text'], str):
            return 'Text must be a string'
        
        if len(data['text']) > 5000:
            return 'Text too long (max 5000 characters)'
        
        target_lang = data.get('target_lang')
        if target_lang and target_lang not in self.translator.get_supported_languages():
            return f'Unsupported target language: {target_lang}'
        
        return None

    def run(self, host='0.0.0.0', port=5000, debug=False):
        """Run the Flask application"""
        logger.info(f"Starting Lingua Translate API on {host}:{port}")
        self.app.run(host=host, port=port, debug=debug)

def create_app():
    """Application factory"""
    api = TranslationAPI()
    return api.app

if __name__ == '__main__':
    # For development
    api = TranslationAPI()
    api.run(debug=True)